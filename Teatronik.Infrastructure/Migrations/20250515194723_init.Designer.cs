// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Teatronik.Infrastructure;

#nullable disable

namespace Teatronik.Infrastructure.Migrations
{
    [DbContext(typeof(TeatronikDbContext))]
    [Migration("20250515194723_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventEntityPropEntity", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventsId", "PropsId");

                    b.HasIndex("PropsId");

                    b.ToTable("EventEntityPropEntity");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.ComponentEntity", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateOnly>("AcquistionDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PropId")
                        .HasColumnType("uuid");

                    b.HasKey("SerialNumber");

                    b.HasIndex("ModelId");

                    b.HasIndex("PropId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.ComponentModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.HasIndex("TypeId");

                    b.ToTable("ComponentModels");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Spectators")
                        .HasColumnType("integer");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.KindEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.PropEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId");

                    b.ToTable("Props");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.PropSchemaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("PropSchemas");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.SeasonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.TypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventEntityPropEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teatronik.Infrastructure.Entities.PropEntity", null)
                        .WithMany()
                        .HasForeignKey("PropsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teatronik.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.ComponentEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.ComponentModelEntity", "Model")
                        .WithMany("Components")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teatronik.Infrastructure.Entities.PropEntity", "Prop")
                        .WithMany("Components")
                        .HasForeignKey("PropId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Model");

                    b.Navigation("Prop");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.ComponentModelEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.KindEntity", "Kind")
                        .WithMany("ComponentModels")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teatronik.Infrastructure.Entities.TypeEntity", "Type")
                        .WithMany("ComponentModels")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kind");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.EventEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.SeasonEntity", "Season")
                        .WithMany("Events")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.PropEntity", b =>
                {
                    b.HasOne("Teatronik.Infrastructure.Entities.PropSchemaEntity", "Schema")
                        .WithMany("Props")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.ComponentModelEntity", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.KindEntity", b =>
                {
                    b.Navigation("ComponentModels");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.PropEntity", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.PropSchemaEntity", b =>
                {
                    b.Navigation("Props");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.SeasonEntity", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Teatronik.Infrastructure.Entities.TypeEntity", b =>
                {
                    b.Navigation("ComponentModels");
                });
#pragma warning restore 612, 618
        }
    }
}
